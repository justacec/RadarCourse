\documentclass[letterpaper,10pt]{article}

\usepackage[left=0.75in, right=0.75in, top=0.75in, bottom=0.75in]{geometry}
\usepackage{longtable}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{bm}

\newcommand{\question}[3]{
\begin{itemize}
\item[{\makebox[1cm]{#1)}}] #2

\vspace{.2in}

#3

\end{itemize}

\vspace{.2in}
}

\begin{document}

{\large Presentation 4 Homework}
\hfill
{\large Justace Clutter}

\vspace{.1in}

\hrule

\vspace{.5in}

\question{1}{Consider a spherical wave emitted from a ``point'' antenna.  For the ``far-field'', it is desired that the wave be ``planar'' over an aperature of width $D$ at range $R$.  The far-field criterion is that the wave front deviate no more than $\lambda/16$ from a plane (the Fraunhofer criterion); show that $R(\text{far-field})=2D^2/\lambda$.}
{

The following solution depends on the small angle approximation:

\begin{equation*}
x = r\left(1-\frac{\theta^2}{2}\right) \qquad \text{ and } \qquad y = r\theta \text{.}
\end{equation*}

\begin{minipage}{3in}
\begin{center}
\includegraphics[width=3in]{Figures/HW2_2_6__1.pdf}
\end{center}
\end{minipage}
\begin{minipage}{3in}

\begin{align*}
y & = \left.R\theta\right|_{y=\frac{D}{2}} \rightarrow \theta = \frac{D}{2R} \\
\therefore x & = R\left(1-\frac{\left(\frac{D}{2R}\right)^2}{2}\right) \\
d & = R - x \\
& = R - R\left(1-\frac{\left(\frac{D}{2R}\right)^2}{2}\right) \\
\therefore R & = \frac{D^2}{8d}
\end{align*}
\end{minipage}

Evaluating the final equation for $R$ with the substitution that $d=\frac{\lambda}{16}$ yields the final relationship for the far-field threshold range:

\begin{equation*}
R = 2\frac{D^2}{\lambda}
\end{equation*}


}

\question{2}{Calculate the near/far-field ``boundary'' ($R=2D^2/\lambda$), for $D=1$m, at L, S, X, Ku, and Ka bands.}
{

<<echo = FALSE, fig.width = 5, fig.height = 2.5, fig.align='center', message = FALSE>>=

require(ggplot2)

Lt = 1
LBandFreq  = 1.5e9 # Hz
SBandFreq  = 3e9 # Hz
XBandFreq  = 10e9 # Hz
KuBandFreq = 15e9 # Hz

c = 3e8 # m/s

LBandLambda = c / LBandFreq
SBandLambda = c / SBandFreq
XBandLambda = c / XBandFreq
KuBandLambda = c / KuBandFreq

dist_L = 2 / LBandLambda
dist_S = 2 / SBandLambda
dist_X = 2 / XBandLambda
dist_Ku = 2 / KuBandLambda

X = seq(0, 3, by = 0.01)
Lreps = rep(LBandLambda, length(X))
Sreps = rep(SBandLambda, length(X))
Xreps = rep(XBandLambda, length(X))
Kureps = rep(KuBandLambda, length(X))
Ltype = rep('L', length(X))
Stype = rep('S', length(X))
Xtype = rep('X', length(X))
Kutype = rep('Ku', length(X))

data = data.frame(x = rep(X, 4), lambda = c(Lreps, Sreps, Xreps, Kureps), type = c(Ltype, Stype, Xtype, Kutype))  
data$r = 2 * (data$x^2) / data$lambda

rp = ggplot(data) + theme_bw() +
  geom_line(aes(x = x, y = r, color = type)) +
  labs(x = 'D (m)', y = 'R (m)') +
  scale_color_discrete(name = 'Band') +
  theme(legend.key = element_blank())
rp

@

The threshold range for the far field for $D=1$m for the L band, S Band, X Band, and Ku Band is \Sexpr{sprintf('%.2f', dist_L)} m, \Sexpr{sprintf('%.2f', dist_S)} m, \Sexpr{sprintf('%.2f', dist_X)} m, \Sexpr{sprintf('%.2f', dist_Ku)} m, respectively.
}

\question{3}{Using your computer, choose of the aperature antenna patterns discussed, and produce a 3D plot of it.}
{

I have choosen to replicate the 20$\lambda$ x 10$\lambda$ rectangular plane aperature presented in the slides.  The exact formula that I used is the following:

\begin{equation*}
f(u,v) = \text{sinc}\left(\frac{kL_xu}{2}\right)\text{sinc}\left(\frac{kL_yv}{2}\right)
\end{equation*}

<<echo = FALSE>>=

library(ggplot2)

LBandFreq  = 1.5e9 # Hz
SBandFreq  = 3e9 # Hz
XBandFreq  = 10e9 # Hz
KuBandFreq = 15e9 # Hz

c = 3e8 # m/s

lambda = c / LBandFreq
lambda = 0.1

Lx = 20*lambda
Ly = 10*lambda
a = 0.3/2
k = (2*pi)/lambda

sinc = function(x) {
  ret = sin(x)/x
  ret[x == 0] = 1
  return(ret)
}

fsquaretp = function(theta, phi, k, Lx, Ly) {
  u = sin(theta) * cos(phi)
  v = sin(theta) * sin(phi)
  ret = sinc(k*Lx*u/2)*sinc(k*Ly*v/2)
  #ret = sinc(theta)*sinc(phi)
  
  return(ret)
}

fsquare = function(u, v, k, Lx, Ly) {
  ret = sinc(k*Lx*u/2)*sinc(k*Ly*v/2)
  return(ret)
}

fcircle = function(theta, phi, k, a) {
  x = k * a * sin(theta)
  return(2*besselJ(abs(x), 1)/x)
}

u = seq(-1, 1, length.out = 500)
v = seq(-1, 1, length.out = 500)

TP = expand.grid(u = u, v = v)

#z = fcircle(TP$theta, TP$phi, k, a)
z1 = fsquare(TP$u, TP$v, k, Lx, Ly)

z1mdb = abs(z1)
z1mdb = z1mdb / max(z1mdb, na.rm = TRUE)
z1mdb = 20*log10(abs(z1mdb))
z1mdb[z1mdb < -50] = -50
z1mdb[is.na(z1mdb)] = -50

data = data.frame(u = TP$u, v = TP$v, z = z1mdb)

rp = ggplot(data) + theme_bw() +
  geom_tile(aes(x = u, y = v, fill = z)) +
  stat_contour(aes(x = u, y = v, z = z), bins = 5, alpha = 0.5, size = 0.5) +
  labs(x = expression(paste('u = sin(', theta, ')cos(', phi, ')')), y = expression(paste('v = sin(', theta, ')sin(', phi, ')'))) +
  scale_fill_gradient2(name = expression(paste('f(', theta, ', ', phi, ') [dB]')), low="white", mid="orange", high="red", midpoint = -25) +
  scale_x_continuous(expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0)) +  
  coord_equal()
rp




@


}

\end{document}